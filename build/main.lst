ARM GAS  /tmp/ccTAs77j.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.SystemClock_Config,"ax",%progbits
  16              		.align	1
  17              		.global	SystemClock_Config
  18              		.arch armv6s-m
  19              		.syntax unified
  20              		.code	16
  21              		.thumb_func
  22              		.fpu softvfp
  24              	SystemClock_Config:
  25              	.LFB35:
  26              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.</center></h2>
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Core/Src/main.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Core/Src/main.c ****   * the License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****   *                             www.st.com/SLA0044
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** #include "cmsis_os.h"
  23:Core/Src/main.c **** #include "gpio.h"
  24:Core/Src/main.c **** 
  25:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  26:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* USER CODE END Includes */
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  31:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  32:Core/Src/main.c **** 
ARM GAS  /tmp/ccTAs77j.s 			page 2


  33:Core/Src/main.c **** /* USER CODE END PTD */
  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  36:Core/Src/main.c **** /* USER CODE BEGIN PD */
  37:Core/Src/main.c **** /* USER CODE END PD */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  40:Core/Src/main.c **** /* USER CODE BEGIN PM */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* USER CODE END PM */
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* USER CODE BEGIN PV */
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* USER CODE END PV */
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  51:Core/Src/main.c **** void SystemClock_Config(void);
  52:Core/Src/main.c **** void MX_FREERTOS_Init(void);
  53:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** /* USER CODE END PFP */
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  58:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  59:Core/Src/main.c **** 
  60:Core/Src/main.c **** /* USER CODE END 0 */
  61:Core/Src/main.c **** 
  62:Core/Src/main.c **** /**
  63:Core/Src/main.c ****   * @brief  The application entry point.
  64:Core/Src/main.c ****   * @retval int
  65:Core/Src/main.c ****   */
  66:Core/Src/main.c **** int main(void)
  67:Core/Src/main.c **** {
  68:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  69:Core/Src/main.c **** 
  70:Core/Src/main.c ****   /* USER CODE END 1 */
  71:Core/Src/main.c **** 
  72:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  73:Core/Src/main.c **** 
  74:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  75:Core/Src/main.c ****   HAL_Init();
  76:Core/Src/main.c **** 
  77:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  78:Core/Src/main.c **** 
  79:Core/Src/main.c ****   /* USER CODE END Init */
  80:Core/Src/main.c **** 
  81:Core/Src/main.c ****   /* Configure the system clock */
  82:Core/Src/main.c ****   SystemClock_Config();
  83:Core/Src/main.c **** 
  84:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
  85:Core/Src/main.c **** 
  86:Core/Src/main.c ****   /* USER CODE END SysInit */
  87:Core/Src/main.c **** 
  88:Core/Src/main.c ****   /* Initialize all configured peripherals */
  89:Core/Src/main.c ****   MX_GPIO_Init();
ARM GAS  /tmp/ccTAs77j.s 			page 3


  90:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
  91:Core/Src/main.c **** 
  92:Core/Src/main.c ****   /* USER CODE END 2 */
  93:Core/Src/main.c **** 
  94:Core/Src/main.c ****   /* Call init function for freertos objects (in freertos.c) */
  95:Core/Src/main.c ****   MX_FREERTOS_Init();
  96:Core/Src/main.c ****   /* Start scheduler */
  97:Core/Src/main.c ****   osKernelStart();
  98:Core/Src/main.c **** 
  99:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler */
 100:Core/Src/main.c ****   /* Infinite loop */
 101:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 102:Core/Src/main.c ****   while (1)
 103:Core/Src/main.c ****   {
 104:Core/Src/main.c ****     /* USER CODE END WHILE */
 105:Core/Src/main.c **** 
 106:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 107:Core/Src/main.c ****   }
 108:Core/Src/main.c ****   /* USER CODE END 3 */
 109:Core/Src/main.c **** }
 110:Core/Src/main.c **** 
 111:Core/Src/main.c **** /**
 112:Core/Src/main.c ****   * @brief System Clock Configuration
 113:Core/Src/main.c ****   * @retval None
 114:Core/Src/main.c ****   */
 115:Core/Src/main.c **** void SystemClock_Config(void)
 116:Core/Src/main.c **** {
  27              		.loc 1 116 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 72
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 00B5     		push	{lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 14, -4
  35 0002 93B0     		sub	sp, sp, #76
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 80
 117:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  38              		.loc 1 117 3 view .LVU1
  39              		.loc 1 117 22 is_stmt 0 view .LVU2
  40 0004 3422     		movs	r2, #52
  41 0006 0021     		movs	r1, #0
  42 0008 05A8     		add	r0, sp, #20
  43 000a FFF7FEFF 		bl	memset
  44              	.LVL0:
 118:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  45              		.loc 1 118 3 is_stmt 1 view .LVU3
  46              		.loc 1 118 22 is_stmt 0 view .LVU4
  47 000e 1422     		movs	r2, #20
  48 0010 0021     		movs	r1, #0
  49 0012 6846     		mov	r0, sp
  50 0014 FFF7FEFF 		bl	memset
  51              	.LVL1:
 119:Core/Src/main.c **** 
 120:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 121:Core/Src/main.c ****   */
ARM GAS  /tmp/ccTAs77j.s 			page 4


 122:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  52              		.loc 1 122 3 is_stmt 1 view .LVU5
  53 0018 1349     		ldr	r1, .L2
  54 001a 0B68     		ldr	r3, [r1]
  55 001c 134A     		ldr	r2, .L2+4
  56 001e 1A40     		ands	r2, r3
  57 0020 8023     		movs	r3, #128
  58 0022 1B01     		lsls	r3, r3, #4
  59 0024 1343     		orrs	r3, r2
  60 0026 0B60     		str	r3, [r1]
 123:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 124:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 125:Core/Src/main.c ****   */
 126:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  61              		.loc 1 126 3 view .LVU6
  62              		.loc 1 126 36 is_stmt 0 view .LVU7
  63 0028 0123     		movs	r3, #1
  64 002a 0593     		str	r3, [sp, #20]
 127:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  65              		.loc 1 127 3 is_stmt 1 view .LVU8
  66              		.loc 1 127 30 is_stmt 0 view .LVU9
  67 002c 8023     		movs	r3, #128
  68 002e 5B02     		lsls	r3, r3, #9
  69 0030 0693     		str	r3, [sp, #24]
 128:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  70              		.loc 1 128 3 is_stmt 1 view .LVU10
  71              		.loc 1 128 34 is_stmt 0 view .LVU11
  72 0032 0222     		movs	r2, #2
  73 0034 0E92     		str	r2, [sp, #56]
 129:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  74              		.loc 1 129 3 is_stmt 1 view .LVU12
  75              		.loc 1 129 35 is_stmt 0 view .LVU13
  76 0036 0F93     		str	r3, [sp, #60]
 130:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
  77              		.loc 1 130 3 is_stmt 1 view .LVU14
  78              		.loc 1 130 32 is_stmt 0 view .LVU15
  79 0038 C023     		movs	r3, #192
  80 003a 1B03     		lsls	r3, r3, #12
  81 003c 1093     		str	r3, [sp, #64]
 131:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
  82              		.loc 1 131 3 is_stmt 1 view .LVU16
  83              		.loc 1 131 32 is_stmt 0 view .LVU17
  84 003e 8023     		movs	r3, #128
  85 0040 DB03     		lsls	r3, r3, #15
  86 0042 1193     		str	r3, [sp, #68]
 132:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  87              		.loc 1 132 3 is_stmt 1 view .LVU18
  88              		.loc 1 132 7 is_stmt 0 view .LVU19
  89 0044 05A8     		add	r0, sp, #20
  90 0046 FFF7FEFF 		bl	HAL_RCC_OscConfig
  91              	.LVL2:
 133:Core/Src/main.c ****   {
 134:Core/Src/main.c ****     Error_Handler();
 135:Core/Src/main.c ****   }
 136:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 137:Core/Src/main.c ****   */
 138:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
ARM GAS  /tmp/ccTAs77j.s 			page 5


  92              		.loc 1 138 3 is_stmt 1 view .LVU20
  93              		.loc 1 138 31 is_stmt 0 view .LVU21
  94 004a 0F23     		movs	r3, #15
  95 004c 0093     		str	r3, [sp]
 139:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 140:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  96              		.loc 1 140 3 is_stmt 1 view .LVU22
  97              		.loc 1 140 34 is_stmt 0 view .LVU23
  98 004e 0C3B     		subs	r3, r3, #12
  99 0050 0193     		str	r3, [sp, #4]
 141:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 100              		.loc 1 141 3 is_stmt 1 view .LVU24
 101              		.loc 1 141 35 is_stmt 0 view .LVU25
 102 0052 0023     		movs	r3, #0
 103 0054 0293     		str	r3, [sp, #8]
 142:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 104              		.loc 1 142 3 is_stmt 1 view .LVU26
 105              		.loc 1 142 36 is_stmt 0 view .LVU27
 106 0056 0393     		str	r3, [sp, #12]
 143:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 107              		.loc 1 143 3 is_stmt 1 view .LVU28
 108              		.loc 1 143 36 is_stmt 0 view .LVU29
 109 0058 0493     		str	r3, [sp, #16]
 144:Core/Src/main.c **** 
 145:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 110              		.loc 1 145 3 is_stmt 1 view .LVU30
 111              		.loc 1 145 7 is_stmt 0 view .LVU31
 112 005a 0121     		movs	r1, #1
 113 005c 6846     		mov	r0, sp
 114 005e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 115              	.LVL3:
 146:Core/Src/main.c ****   {
 147:Core/Src/main.c ****     Error_Handler();
 148:Core/Src/main.c ****   }
 149:Core/Src/main.c **** }
 116              		.loc 1 149 1 view .LVU32
 117 0062 13B0     		add	sp, sp, #76
 118              		@ sp needed
 119 0064 00BD     		pop	{pc}
 120              	.L3:
 121 0066 C046     		.align	2
 122              	.L2:
 123 0068 00700040 		.word	1073770496
 124 006c FFE7FFFF 		.word	-6145
 125              		.cfi_endproc
 126              	.LFE35:
 128              		.section	.text.main,"ax",%progbits
 129              		.align	1
 130              		.global	main
 131              		.syntax unified
 132              		.code	16
 133              		.thumb_func
 134              		.fpu softvfp
 136              	main:
 137              	.LFB34:
  67:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 138              		.loc 1 67 1 is_stmt 1 view -0
ARM GAS  /tmp/ccTAs77j.s 			page 6


 139              		.cfi_startproc
 140              		@ Volatile: function does not return.
 141              		@ args = 0, pretend = 0, frame = 0
 142              		@ frame_needed = 0, uses_anonymous_args = 0
 143 0000 10B5     		push	{r4, lr}
 144              	.LCFI2:
 145              		.cfi_def_cfa_offset 8
 146              		.cfi_offset 4, -8
 147              		.cfi_offset 14, -4
  75:Core/Src/main.c **** 
 148              		.loc 1 75 3 view .LVU34
 149 0002 FFF7FEFF 		bl	HAL_Init
 150              	.LVL4:
  82:Core/Src/main.c **** 
 151              		.loc 1 82 3 view .LVU35
 152 0006 FFF7FEFF 		bl	SystemClock_Config
 153              	.LVL5:
  89:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 154              		.loc 1 89 3 view .LVU36
 155 000a FFF7FEFF 		bl	MX_GPIO_Init
 156              	.LVL6:
  95:Core/Src/main.c ****   /* Start scheduler */
 157              		.loc 1 95 3 view .LVU37
 158 000e FFF7FEFF 		bl	MX_FREERTOS_Init
 159              	.LVL7:
  97:Core/Src/main.c **** 
 160              		.loc 1 97 3 view .LVU38
 161 0012 FFF7FEFF 		bl	osKernelStart
 162              	.LVL8:
 163              	.L5:
 102:Core/Src/main.c ****   {
 164              		.loc 1 102 3 discriminator 1 view .LVU39
 107:Core/Src/main.c ****   /* USER CODE END 3 */
 165              		.loc 1 107 3 discriminator 1 view .LVU40
 166 0016 FEE7     		b	.L5
 167              		.cfi_endproc
 168              	.LFE34:
 170              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 171              		.align	1
 172              		.global	HAL_TIM_PeriodElapsedCallback
 173              		.syntax unified
 174              		.code	16
 175              		.thumb_func
 176              		.fpu softvfp
 178              	HAL_TIM_PeriodElapsedCallback:
 179              	.LVL9:
 180              	.LFB36:
 150:Core/Src/main.c **** 
 151:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 152:Core/Src/main.c **** 
 153:Core/Src/main.c **** /* USER CODE END 4 */
 154:Core/Src/main.c **** 
 155:Core/Src/main.c **** /**
 156:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 157:Core/Src/main.c ****   * @note   This function is called  when TIM2 interrupt took place, inside
 158:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 159:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
ARM GAS  /tmp/ccTAs77j.s 			page 7


 160:Core/Src/main.c ****   * @param  htim : TIM handle
 161:Core/Src/main.c ****   * @retval None
 162:Core/Src/main.c ****   */
 163:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 164:Core/Src/main.c **** {
 181              		.loc 1 164 1 view -0
 182              		.cfi_startproc
 183              		@ args = 0, pretend = 0, frame = 0
 184              		@ frame_needed = 0, uses_anonymous_args = 0
 185              		.loc 1 164 1 is_stmt 0 view .LVU42
 186 0000 10B5     		push	{r4, lr}
 187              	.LCFI3:
 188              		.cfi_def_cfa_offset 8
 189              		.cfi_offset 4, -8
 190              		.cfi_offset 14, -4
 165:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 166:Core/Src/main.c **** 
 167:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 168:Core/Src/main.c ****   if (htim->Instance == TIM2) {
 191              		.loc 1 168 3 is_stmt 1 view .LVU43
 192              		.loc 1 168 11 is_stmt 0 view .LVU44
 193 0002 0268     		ldr	r2, [r0]
 194              		.loc 1 168 6 view .LVU45
 195 0004 8023     		movs	r3, #128
 196 0006 DB05     		lsls	r3, r3, #23
 197 0008 9A42     		cmp	r2, r3
 198 000a 00D0     		beq	.L8
 199              	.LVL10:
 200              	.L6:
 169:Core/Src/main.c ****     HAL_IncTick();
 170:Core/Src/main.c ****   }
 171:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 172:Core/Src/main.c **** 
 173:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 174:Core/Src/main.c **** }
 201              		.loc 1 174 1 view .LVU46
 202              		@ sp needed
 203 000c 10BD     		pop	{r4, pc}
 204              	.LVL11:
 205              	.L8:
 169:Core/Src/main.c ****     HAL_IncTick();
 206              		.loc 1 169 5 is_stmt 1 view .LVU47
 207 000e FFF7FEFF 		bl	HAL_IncTick
 208              	.LVL12:
 209              		.loc 1 174 1 is_stmt 0 view .LVU48
 210 0012 FBE7     		b	.L6
 211              		.cfi_endproc
 212              	.LFE36:
 214              		.section	.text.Error_Handler,"ax",%progbits
 215              		.align	1
 216              		.global	Error_Handler
 217              		.syntax unified
 218              		.code	16
 219              		.thumb_func
 220              		.fpu softvfp
 222              	Error_Handler:
 223              	.LFB37:
ARM GAS  /tmp/ccTAs77j.s 			page 8


 175:Core/Src/main.c **** 
 176:Core/Src/main.c **** /**
 177:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 178:Core/Src/main.c ****   * @retval None
 179:Core/Src/main.c ****   */
 180:Core/Src/main.c **** void Error_Handler(void)
 181:Core/Src/main.c **** {
 224              		.loc 1 181 1 is_stmt 1 view -0
 225              		.cfi_startproc
 226              		@ args = 0, pretend = 0, frame = 0
 227              		@ frame_needed = 0, uses_anonymous_args = 0
 228              		@ link register save eliminated.
 182:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 183:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 184:Core/Src/main.c **** 
 185:Core/Src/main.c ****   /* USER CODE END Error_Handler_Debug */
 186:Core/Src/main.c **** }
 229              		.loc 1 186 1 view .LVU50
 230              		@ sp needed
 231 0000 7047     		bx	lr
 232              		.cfi_endproc
 233              	.LFE37:
 235              		.text
 236              	.Letext0:
 237              		.file 2 "/usr/local/gcc-arm-none-eabi-8-2019-q3-update/arm-none-eabi/include/machine/_default_type
 238              		.file 3 "/usr/local/gcc-arm-none-eabi-8-2019-q3-update/arm-none-eabi/include/sys/_stdint.h"
 239              		.file 4 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/system_stm32l0xx.h"
 240              		.file 5 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l071xx.h"
 241              		.file 6 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_def.h"
 242              		.file 7 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_rcc.h"
 243              		.file 8 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_dma.h"
 244              		.file 9 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_tim.h"
 245              		.file 10 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal.h"
 246              		.file 11 "Core/Inc/gpio.h"
 247              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 248              		.file 13 "<built-in>"
ARM GAS  /tmp/ccTAs77j.s 			page 9


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccTAs77j.s:16     .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccTAs77j.s:24     .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccTAs77j.s:123    .text.SystemClock_Config:0000000000000068 $d
     /tmp/ccTAs77j.s:129    .text.main:0000000000000000 $t
     /tmp/ccTAs77j.s:136    .text.main:0000000000000000 main
     /tmp/ccTAs77j.s:171    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccTAs77j.s:178    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccTAs77j.s:215    .text.Error_Handler:0000000000000000 $t
     /tmp/ccTAs77j.s:222    .text.Error_Handler:0000000000000000 Error_Handler

UNDEFINED SYMBOLS
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
MX_GPIO_Init
MX_FREERTOS_Init
osKernelStart
HAL_IncTick
